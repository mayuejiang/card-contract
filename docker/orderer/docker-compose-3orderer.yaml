version: '2.0'

services:

  cli:
    image: hyperledger/fabric-tools:2.4.1
    restart: always
    container_name: fabric-cli
    hostname: fabric-cli
    tty: true
    extra_hosts:
      - "orderer0.example.com:192.168.0.137"
      - "orderer1.example.com:192.168.0.137"
      - "orderer2.example.com:192.168.0.137"
      - "peer0.org1.example.com:192.168.0.137"
      - "peer1.org1.example.com:192.168.0.137"
      - "peer0.org2.example.com:192.168.0.137"
      - "peer1.org2.example.com:192.168.0.137"
    environment:
      - CORE_PEER_ID=fabric-cli
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051 # default to operate on peer0.org1
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp
      - FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_LOGGING_FORMAT=%{color}[%{id:03x} %{time:01-02 15:04:05.00 MST}] [%{module}] %{shortfunc} -> %{level:.4s}%{color:reset} %{message}
      - CORE_PEER_TLS_ENABLED=true  # to enable TLS, change to true
      - ORDERER_CA=/etc/hyperledger/fabric/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

    volumes:
      - /root/fabric/fabric-samples/config/crypto-config.yaml:/etc/hyperledger/fabric/crypto-config.yaml
      - /root/fabric/fabric-samples/config/configtx.yaml:/etc/hyperledger/fabric/configtx.yaml
      - /root/fabric/fabric-samples/crypto-config:/etc/hyperledger/fabric/crypto-config
      - /root/fabric/fabric-samples/channel-artifacts:/tmp/channel-artifacts
      - /root/fabric/fabric-samples/chaincode:/etc/hyperledger/fabric/chaincode
      - /root/production/fabric-cli:/var/hyperledger/production
    #working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    working_dir: /root/fabric/peer
    command: bash -c 'cd /tmp; source scripts/func.sh; while true; do sleep 20170504; done'


  orderer0.example.com: # There can be multiple orderers
    image: hyperledger/fabric-orderer:2.4.1
    restart: always
    container_name: orderer0.example.com
    hostname: orderer0.example.com
    ports:
      - 7050:7050
      - 8443:8443
    extra_hosts:
      - "orderer0.example.com:192.168.0.137"
      - "orderer1.example.com:192.168.0.137"
      - "orderer2.example.com:192.168.0.137"
      - "peer0.org1.example.com:192.168.0.137"
      - "peer1.org1.example.com:192.168.0.137"
      - "peer0.org2.example.com:192.168.0.137"
      - "peer1.org2.example.com:192.168.0.137"
    environment:
      - FABRIC_LOGGING_FORMAT="%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}"
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 # default: 127.0.0.1
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file # default: provisional
      - ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/fabric/orderer.genesis.block # by default, all materials should be put under $FABRIC_CFG_PATH, which defaults to /etc/hyperledger/fabric
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP # default: DEFAULT
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/msp
      - ORDERER_GENERAL_LEDGERTYPE=file
      #- ORDERER_GENERAL_LEDGERTYPE=json  # default: file
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443  # operation RESTful API
      - ORDERER_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
      #- ORDERER_RAMLEDGER_HISTORY_SIZE=100  #only useful when use ram ledger
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true # default: false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]
      # Only required by raft mode
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/tls/server.key
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]
      - FABRIC_LOGGING_SPEC=DEBUG
    volumes:
      - /root/fabric/fabric-samples/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/etc/hyperledger/fabric/msp
      - /root/fabric/fabric-samples/crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/etc/hyperledger/fabric/tls
      - /root/fabric/fabric-samples/channel-artifacts/orderer.genesis.block:/etc/hyperledger/fabric/orderer.genesis.block
      - /root/production/orderer0:/var/hyperledger/production
    expose:
      - "7050"  # gRPC
      - "8443"  # Operation REST
    command: orderer start

  orderer1.example.com:
    image: hyperledger/fabric-orderer:2.4.1
    restart: always
    container_name: orderer1.example.com
    hostname: orderer1.example.com
    ports:
      - 8050:7050
      - 8444:8443
    extra_hosts:
      - "orderer0.example.com:192.168.0.137"
      - "orderer1.example.com:192.168.0.137"
      - "orderer2.example.com:192.168.0.137"
      - "peer0.org1.example.com:192.168.0.137"
      - "peer1.org1.example.com:192.168.0.137"
      - "peer0.org2.example.com:192.168.0.137"
      - "peer1.org2.example.com:192.168.0.137"
    environment:
      - FABRIC_LOGGING_SPEC=DEBUG
      - FABRIC_LOGGING_FORMAT="%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}"
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 # default: 127.0.0.1
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file # default: provisional
      - ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/fabric/orderer.genesis.block # by default, all materials should be put under $FABRIC_CFG_PATH, which defaults to /etc/hyperledger/fabric
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP # default: DEFAULT
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/msp
      - ORDERER_GENERAL_LEDGERTYPE=file
      #- ORDERER_GENERAL_LEDGERTYPE=json  # default: file
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443  # operation RESTful API
      - ORDERER_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
      #- ORDERER_RAMLEDGER_HISTORY_SIZE=100  #only useful when use ram ledger
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true # default: false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]
      # Only required by raft mode
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/tls/server.key
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_SENDBUFFERSIZE=10
    volumes:
      - /root/fabric/fabric-samples/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/etc/hyperledger/fabric/msp
      - /root/fabric/fabric-samples/crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls/:/etc/hyperledger/fabric/tls
      - /root/fabric/fabric-samples/channel-artifacts/orderer.genesis.block:/etc/hyperledger/fabric/orderer.genesis.block
      - /root/production/orderer1:/var/hyperledger/production
    command: orderer start


  orderer2.example.com:
    image: hyperledger/fabric-orderer:2.4.1
    restart: always
    container_name: orderer2.example.com
    hostname: orderer2.example.com
    ports:
      - 9050:7050
      - 8445:8443
    extra_hosts:
      - "orderer0.example.com:192.168.0.137"
      - "orderer1.example.com:192.168.0.137"
      - "orderer2.example.com:192.168.0.137"
      - "peer0.org1.example.com:192.168.0.137"
      - "peer1.org1.example.com:192.168.0.137"
      - "peer0.org2.example.com:192.168.0.137"
      - "peer1.org2.example.com:192.168.0.137"
    environment:
      - FABRIC_LOGGING_SPEC=DEBUG  # default: INFO
      - FABRIC_LOGGING_FORMAT="%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}"
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 # default: 127.0.0.1
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file # default: provisional
      - ORDERER_GENERAL_BOOTSTRAPFILE=/etc/hyperledger/fabric/orderer.genesis.block # by default, all materials should be put under $FABRIC_CFG_PATH, which defaults to /etc/hyperledger/fabric
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP # default: DEFAULT
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/fabric/msp
      - ORDERER_GENERAL_LEDGERTYPE=file
      #- ORDERER_GENERAL_LEDGERTYPE=json  # default: file
      - ORDERER_OPERATIONS_LISTENADDRESS=0.0.0.0:8443  # operation RESTful API
      - ORDERER_METRICS_PROVIDER=prometheus  # prometheus will pull metrics from orderer via /metrics RESTful API
      #- ORDERER_RAMLEDGER_HISTORY_SIZE=100  #only useful when use ram ledger
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true # default: false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/fabric/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/fabric/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]
      # Only required by raft mode
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/etc/hyperledger/fabric/tls/server.key
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/etc/hyperledger/fabric/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/etc/hyperledger/fabric/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_SENDBUFFERSIZE=10
    volumes:
      - /root/fabric/fabric-samples/crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/etc/hyperledger/fabric/msp
      - /root/fabric/fabric-samples/crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls/:/etc/hyperledger/fabric/tls
      - /root/fabric/fabric-samples/channel-artifacts/orderer.genesis.block:/etc/hyperledger/fabric/orderer.genesis.block
      - /root/production/orderer2:/var/hyperledger/production
    command: orderer start


